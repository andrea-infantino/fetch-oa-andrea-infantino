package com.fetch.fetch_oa;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.fetch.fetch_oa.DTOs.Receipt;
import com.fetch.fetch_oa.DTOs.Id;
import com.fetch.fetch_oa.DTOs.Points;

/**
 * Controller to handle receipt processing and points retrieval.
 */
@RestController
@RequestMapping("/receipts")
public class ApiController {

    /**
     * Service to handle operations on receipts and points, and to store data.
     */
    private final DataService data;

    public ApiController(DataService data) {
        this.data = data;
    }

    /**
     * Endpoint to process a receipt and return its unique ID (generated by the server).
     * The receipt is validated before processing.
     * @param receipt The receipt object to be processed (parsed from JSON).
     * @return 200 OK with the generated ID if the receipt is valid, or 400 Bad Request with an error message otherwise.
     */
    @PostMapping("/process")
    public ResponseEntity<?> postReceipt(@RequestBody Receipt receipt) {
        if (data.checkReceipt(receipt))
            return ResponseEntity.ok(new Id(data.add(receipt)));
        
        return ResponseEntity.badRequest().body("The receipt is invalid.");  
    }

    /**
     * Endpoint to retrieve the points associated with a given receipt ID.
     * The ID is checked for validity before returning the points.
     * @param id The unique ID of the receipt.
     * @return 200 OK with the points if the ID is valid, or 404 Not Found with an error message otherwise.
     */
    @GetMapping("/{id}/points")
    public ResponseEntity<?> getPoints(@PathVariable String id) {
        if (data.checkId(id))
            return ResponseEntity.ok(new Points(data.get(id)));

        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No receipt found for that ID.");
    }
}